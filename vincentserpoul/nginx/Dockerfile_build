FROM ubuntu:latest
# ALL CREDITS GOES TO: https://github.com/Zenithar/dockerfiles
MAINTAINER Vincent Serpoul <vincent@serpoul.com>

# Set the env variable DEBIAN_FRONTEND to noninteractive
ENV DEBIAN_FRONTEND noninteractive

# Fix locales
RUN locale-gen en_US.UTF-8 && dpkg-reconfigure locales

# Set correct environment variables.
ENV HOME /root

# Run upgrades
RUN echo udev hold | dpkg --set-selections && \
    echo initscripts hold | dpkg --set-selections &&\
    echo upstart hold | dpkg --set-selections &&\
    apt-get update -q &&\
    apt-get -y upgrade

# Install build tools for nginx
RUN apt-get -y install wget git unzip build-essential libc6 libexpat1-dev libgd2-xpm-dev libgeoip1 libgeoip-dev libpam0g libssl1.0.0 libxml2 libperl-dev perl perl-base

# Download nginx
ENV PCRE_VERSION 8.38
ENV ZLIB_VERSION 1.2.8
ENV OPENSSL_VERSION 1.0.2f
ENV NGINX_VERSION 1.9.12
ENV HDR_MORE_MOD_VERSION 0.27
ENV PSOL_VERSION 1.10.33.5

WORKDIR /usr/src

RUN wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-${PCRE_VERSION}.tar.gz
RUN wget http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz
RUN wget ftp://ftp.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
RUN wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz
RUN wget https://github.com/agentzh/headers-more-nginx-module/archive/v${HDR_MORE_MOD_VERSION}.tar.gz
RUN wget https://github.com/pagespeed/ngx_pagespeed/archive/v${PSOL_VERSION}-beta.tar.gz

RUN for file in /usr/src/*.tar.gz; do tar -xf $file; rm -rf $file; done

# Modules
RUN cd ngx_pagespeed-${PSOL_VERSION}-beta &&\
    wget https://dl.google.com/dl/page-speed/psol/${PSOL_VERSION}.tar.gz &&\
    tar -xf ${PSOL_VERSION}.tar.gz &&\
    rm -f ${PSOL_VERSION}.tar.gz

# Configure nginx
RUN ls /usr/src/nginx-${NGINX_VERSION}
RUN cd /usr/src/nginx-${NGINX_VERSION} && ./configure \
    --prefix=/opt/nginx \
    --user=www-data \
    --group=www-data \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --sbin-path=/usr/sbin/nginx \
    --http-client-body-temp-path=/var/lib/nginx/body \
    --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
    --http-log-path=/var/log/nginx/access.log \
    --http-proxy-temp-path=/var/lib/nginx/proxy \
    --http-scgi-temp-path=/var/lib/nginx/scgi \
    --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
    --lock-path=/var/lock/nginx.lock \
    --pid-path=/var/run/nginx.pid \
    --with-http_addition_module \
    --with-http_secure_link_module \
    --with-http_dav_module \
    --with-http_gzip_static_module \
    --with-http_realip_module \
    --with-http_stub_status_module \
    --with-http_ssl_module \
    --with-http_sub_module \
    --with-ipv6 \
    --with-mail \
    --with-threads \
    --with-mail_ssl_module \
    --without-mail_pop3_module \
    --without-mail_imap_module \
    --without-mail_smtp_module \
    --with-http_v2_module \
    --with-file-aio \
    --with-openssl=/usr/src/openssl-${OPENSSL_VERSION} \
    --with-openssl-opt="enable-ec_nistp_64_gcc_128 no-krb5 enable-tlsext" \
    --with-pcre=/usr/src/pcre-${PCRE_VERSION} \
    --with-pcre-jit \
    --with-zlib=/usr/src/zlib-${ZLIB_VERSION} \
    --add-module=/usr/src/ngx_pagespeed-${PSOL_VERSION}-beta \
    --add-module=/usr/src/headers-more-nginx-module-${HDR_MORE_MOD_VERSION} \
    --with-http_geoip_module \
    --with-http_image_filter_module

RUN mkdir -p /var/lib/nginx &&\
    mkdir -p /www &&\
    mkdir /rootfs
RUN cd /usr/src/nginx-${NGINX_VERSION} && make && make DESTDIR=/rootfs install

# Add geoIP Data from maxmind
RUN mkdir -p /rootfs/usr/local/share/GeoIP/ &&\
    wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz -O /rootfs/usr/local/share/GeoIP/GeoLiteCity.dat.gz &&\
    gzip -d /rootfs/usr/local/share/GeoIP/GeoLiteCity.dat.gz &&\
    wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz -O /rootfs/usr/local/share/GeoIP/GeoIP.dat.gz &&\
    gzip -d /rootfs/usr/local/share/GeoIP/GeoIP.dat.gz

RUN apt-get install -qy busybox-static

# Build Root FS for nano image creation
WORKDIR /rootfs
RUN mkdir -p bin etc dev dev/pts lib proc sys tmp usr
RUN touch etc/resolv.conf
RUN cp /etc/nsswitch.conf etc/nsswitch.conf
RUN echo root:x:0:0:root:/:/bin/sh > etc/passwd
RUN echo root:x:0: > etc/group
RUN fgrep www-data /etc/passwd >> etc/passwd
RUN fgrep www-data /etc/group >> etc/group
RUN ln -s lib lib64
RUN ln -s usr/lib lib64
RUN ln -s bin sbin
RUN cp /bin/busybox bin
RUN for X in $(busybox --list) ; do ln -s busybox bin/$X ; done
# thanks to ldd /usr/sbin/nginx
RUN bash -c "cp /lib/x86_64-linux-gnu/lib{c,dl,nsl,nss_*,pthread,resolv,crypt,rt,m,gcc_s,expat,z,lzma}.so.* lib"
RUN bash -c "cp /usr/lib/x86_64-linux-gnu/lib{gd,GeoIP,stdc++,jpeg,png12,freetype,fontconfig,Xpm,vpx,tiff,X11,jbig,xcb,Xau,Xdmcp}.so.* lib"
RUN cp /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 lib
ADD etc/nginx /rootfs/etc/nginx
ADD ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
RUN mkdir /rootfs/etc/nginx/sites-enabled &&\
    bash -c "mkdir -p /rootfs/var/lib/nginx/{body,fastcgi,proxy,scgi,uwsgi}" &&\
    bash -c "mkdir -p /rootfs/var/www/{empty,default}" &&\
    mv /rootfs/opt/nginx/html/* /rootfs/var/www/default &&\
    rm -Rf /rootfs/opt/nginx &&\
    chown -R www-data:www-data /rootfs/var/www &&\
    mkdir -p /rootfs/var/run &&\
    touch /rootfs/var/run/nginx.pid &&\
    chown www-data:www-data /rootfs/var/run/nginx.pid &&\
    mkdir -p /rootfs/tmp/nginx &&\
    mkdir -p /rootfs/var/ngx_pagespeed_cache &&\
    mkdir -p /rootfs/var/log/nginx &&\
    chown -R www-data:www-data /rootfs/var/ngx_pagespeed_cache &&\
    chown -R www-data:www-data /rootfs/var/log/nginx &&\
    chown -R www-data:www-data /rootfs/tmp/nginx &&\
    chown -R www-data:www-data /rootfs/var/lib/nginx/

RUN tar cf /rootfs.tar .
RUN for X in null ptmx random stdin stdout stderr tty urandom zero ; do tar uf /rootfs.tar -C/ ./dev/$X ; done

CMD /bin/bash

# docker build --rm -t vincentserpoul/nginx_build -f Dockerfile_build ./
# docker run vincentserpoul/nginx_build cat /rootfs.tar > ./rootfs.tar
